{"version":3,"sources":["views/ChatSpace/ChatHome.js","views/ChatSpace/Room.js","views/ChatSpace/ChatSpace.js"],"names":["useStyles","makeStyles","theme","root","backgroundColor","palette","background","paper","minHeight","width","flexGrow","position","ChatHome","onlinePersonalsList","getRoom","classes","React","useState","value","setValue","className","AppBar","color","Tabs","onChange","event","newValue","variant","scrollButtons","aria-label","map","personal","key","Tab","id","label","username","icon","index","height","display","flexDirection","header","zIndex","padding","alignItems","title","flex","body","overflow","messageContainer","margin","messageRight","maxWidth","alignSelf","blue","messageLeft","grey","form","spacing","iconButton","divider","message","type","content","Room","changeView","currentRoom","sendChatMessage","useEffect","console","log","setTimeout","messagesEndRef","current","scrollIntoView","behavior","useRef","Paper","IconButton","onClick","e","Button","room_name","Divider","orientation","flexItem","messages","date","Date","room","author","right","style","textAlign","fontSize","toLocaleString","ref","component","target","trim","onSubmit","preventDefault","TextField","required","name","multiline","rows","TabPanel","props","children","other","Typography","role","hidden","aria-labelledby","Box","p","fab","bottom","fabGreen","common","white","green","ChatSpace","addCallBack","deleteCallBack","webSocket","useTheme","auth","useAuth","setOnlinePersonalsList","setCurrentRoom","run","data","send","JSON","stringify","transitionDuration","enter","transitions","duration","enteringScreen","exit","leavingScreen","fabs","clsx","axis","direction","onChangeIndex","dir","to","code","room_type","user","message_type","message_code","getTime","Zoom","in","timeout","transitionDelay","unmountOnExit","Fab"],"mappings":"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","file":"static/js/24.25846399.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport AvatarIcon from '@material-ui/icons/PersonOutline';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Box from '@material-ui/core/Box';\r\n\r\nfunction TabPanel(props) {\r\n  const { children, value, index, ...other } = props;\r\n\r\n  return (\r\n    <div\r\n      role=\"tabpanel\"\r\n      hidden={value !== index}\r\n      id={`scrollable-force-tabpanel-${index}`}\r\n      aria-labelledby={`scrollable-force-tab-${index}`}\r\n      {...other}\r\n    >\r\n      {value === index && (\r\n        <Box p={3}>\r\n          <Typography>{children}</Typography>\r\n        </Box>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nTabPanel.propTypes = {\r\n  children: PropTypes.node,\r\n  index: PropTypes.any.isRequired,\r\n  value: PropTypes.any.isRequired,\r\n};\r\n\r\nfunction a11yProps(index) {\r\n  return {\r\n    id: `scrollable-force-tab-${index}`,\r\n    'aria-controls': `scrollable-force-tabpanel-${index}`,\r\n  };\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    backgroundColor: theme.palette.background.paper,\r\n    minHeight: '85vh',\r\n    width: \"100%\",\r\n    flexGrow: 1,\r\n    position: \"relative\",\r\n    \r\n  },\r\n}));\r\n\r\nexport default function ChatHome({onlinePersonalsList, getRoom}) {\r\n  const classes = useStyles();\r\n  const [value, setValue] = React.useState(0);\r\n\r\n  const handleChange = (event, newValue) => {\r\n    getRoom(newValue)\r\n    setValue(newValue)\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"absolute\" color=\"primary\">\r\n        <Tabs\r\n          value={value}\r\n          onChange={handleChange}\r\n          variant=\"scrollable\"\r\n          scrollButtons=\"on\"\r\n          aria-label=\"scrollable force tabs example\"\r\n        >\r\n            {\r\n                onlinePersonalsList.map((personal, key)=>{\r\n                    return <Tab key={key} value={personal.id} label={personal.username} icon={<AvatarIcon />} {...a11yProps(personal.id)} />\r\n                })\r\n            }\r\n        </Tabs>\r\n      </AppBar>\r\n      Liste de dernière conversation\r\n    </div>\r\n  );\r\n}","import React, {useRef, useEffect} from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nimport Paper from '@material-ui/core/Paper';\r\nimport {blue, grey } from '@material-ui/core/colors';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport CancelIcon from '@material-ui/icons/ArrowBackIos';\r\nimport CallIcon from '@material-ui/icons/Call';\r\nimport VideoIcon from '@material-ui/icons/VideoCall';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport SendIcon from '@material-ui/icons/Send';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    height: '87vh',\r\n    width: \"100%\",\r\n    flexGrow: 1,\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    position: \"relative\",\r\n    \r\n  },\r\n  header:{\r\n    position: 'relative',\r\n    zIndex: 1,\r\n    padding: '2px 2px',\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    width: \"100%\"\r\n  },\r\n  title:{\r\n    flex: 1\r\n  },\r\n  body: {\r\n    flex: 1,\r\n    overflow: 'auto',\r\n  },\r\n  messageContainer: {\r\n    margin: '10px 0px',\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n  },\r\n  messageRight:{\r\n    padding: '6px 13px',\r\n    maxWidth: \"80%\",\r\n    color: 'black',\r\n    alignSelf: 'flex-end !important',\r\n    backgroundColor: blue[50],\r\n  },\r\n  messageLeft:{\r\n    padding: '6px 13px',\r\n    maxWidth: \"80%\",\r\n    alignSelf: 'flex-start !important',\r\n    backgroundColor: grey[200],\r\n  },\r\n  form:{\r\n    padding: '2px 4px',\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    width: \"100%\",\r\n    '& .MuiTextField-root': {\r\n      margin: theme.spacing(0.5),\r\n      flex: 1,\r\n    },\r\n  },\r\n  iconButton: {\r\n    padding: 10,\r\n  },\r\n  divider: {\r\n    height: 28,\r\n    margin: 4,\r\n  },\r\n}));\r\n\r\nlet message={\r\n  type: 'text',\r\n  content: '',\r\n};\r\n\r\nexport default function Room({changeView, currentRoom, sendChatMessage}) {\r\n  const classes = useStyles();\r\n  const [value, setValue] = React.useState();\r\n\r\n  React.useEffect(()=>{\r\n    console.log('je suis la')\r\n    console.log(currentRoom)\r\n    \r\n    setTimeout(() => {\r\n      messagesEndRef.current.scrollIntoView({ behavior: \"smooth\" })\r\n      }, 1000);\r\n\r\n  }, [currentRoom])\r\n\r\n\r\n  const handleChange = (event) => {\r\n    message={\r\n\t\t\t...message,\r\n\t\t\tcontent: event.target.value.trim(),\r\n\t\t}\r\n  };\r\n\r\n  const handleSubmit = (event) =>{\r\n    event.preventDefault();\r\n    console.log(message);\r\n    sendChatMessage(message, currentRoom.room);\r\n    message={\r\n      type: 'text',\r\n      content: '',\r\n    };\r\n    setValue('')\r\n    setValue(null)\r\n    \r\n  }\r\n\r\n\r\n  const messagesEndRef = useRef(null)\r\n/* \r\n  const scrollToBottom = () => {\r\n  }\r\n\r\n  useEffect(scrollToBottom, [currentRoom.messages]); */\r\n\r\n  return (\r\n      <div className={classes.root}>\r\n        <Paper   className={classes.header}>\r\n          <IconButton onClick={(e)=>changeView(0)}>\r\n            <CancelIcon/>\r\n          </IconButton>\r\n          <div  className={classes.title}>\r\n          <Button>\r\n            {currentRoom.room_name}\r\n          </Button>\r\n          </div>\r\n          <IconButton onClick={(e)=>changeView(2)}>\r\n            <VideoIcon/>\r\n          </IconButton>\r\n          <Divider orientation=\"vertical\" flexItem />\r\n          <IconButton onClick={(e)=>changeView(2)}>\r\n            <CallIcon/>\r\n          </IconButton>\r\n        </Paper>\r\n        <div className={classes.body}>\r\n          {\r\n            currentRoom.messages !== []\r\n              ? currentRoom.messages.map((message, key)=>{\r\n                  const date = new Date(message.date)\r\n                  return (<div key={key}  className={classes.messageContainer}>\r\n                    <Paper className={currentRoom.room !== message.author.id? classes.messageRight : classes.messageLeft}>\r\n                      <strong  className={classes.right}>{message.author.username}</strong>\r\n                      <p>{message.message}</p>\r\n                      <p style={{textAlign: 'right', fontSize: 14}}>\r\n                      <small>{date.toLocaleString()}</small>\r\n                      </p>\r\n                    </Paper>\r\n                    </div>)\r\n                })\r\n              : null\r\n          }\r\n          <div ref={messagesEndRef} />\r\n        </div>\r\n    <Paper component=\"form\"  className={classes.form} onChange={handleChange} onSubmit={handleSubmit}>\r\n      <IconButton className={classes.iconButton} aria-label=\"menu\">\r\n        <MenuIcon />\r\n      </IconButton>\r\n      <TextField\r\n          required\r\n          id=\"filled-multiline-flexible\"\r\n          name=\"text\"\r\n          label=\"Message\"\r\n          multiline\r\n          rows={0}\r\n          value={value}\r\n          variant=\"outlined\"\r\n        />\r\n      <IconButton\r\n        type=\"submit\"\r\n        aria-label=\"directions\"\r\n      >\r\n        <SendIcon style={{fontSize: 30}}/>\r\n      </IconButton>\r\n    </Paper>\r\n    </div>\r\n    );\r\n}\r\n","/* import React from 'react';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport ImageIcon from '@material-ui/icons/Image';\r\nimport WorkIcon from '@material-ui/icons/PersonOutlined';\r\nimport BeachAccessIcon from '@material-ui/icons/BeachAccess';\r\nimport Divider from '@material-ui/core/Divider';\r\n\r\nimport { green } from '@material-ui/core/colors';\r\n\r\nimport bgImage from 'assets/img/login1.jpg';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    Height: '80vh',\r\n  },\r\n  root1: {\r\n    width: '100%',\r\n    maxHeight: '80vh',\r\n    overflow: 'auto',\r\n    backgroundColor: theme.palette.background.paper,\r\n  },\r\n  image: {\r\n    backgroundImage: `url(${bgImage})`,\r\n    backgroundRepeat: 'no-repeat',\r\n    backgroundColor:\r\n      theme.palette.type === 'light' ? theme.palette.grey[50] : theme.palette.grey[900],\r\n    backgroundSize: 'cover',\r\n    backgroundPosition: 'center',\r\n  },\r\n  paper: {\r\n    margin: theme.spacing(8, 4),\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n  },\r\n  avatar: {\r\n    margin: theme.spacing(1),\r\n    backgroundColor: theme.palette.secondary.main,\r\n  },\r\n  form: {\r\n    width: '100%', // Fix IE 11 issue.\r\n    marginTop: theme.spacing(1),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n  //preload\r\n  wrapper: {\r\n    margin: theme.spacing(1),\r\n    position: 'relative',\r\n  },\r\n  buttonSuccess: {\r\n    backgroundColor: green[500],\r\n    '&:hover': {\r\n      backgroundColor: green[700],\r\n    },\r\n  },\r\n  fabProgress: {\r\n    color: green[500],\r\n    position: 'absolute',\r\n    top: -6,\r\n    left: -6,\r\n    zIndex: 1,\r\n  },\r\n  buttonProgress: {\r\n    color: green[500],\r\n    position: 'absolute',\r\n    top: '50%',\r\n    left: '50%',\r\n    marginTop: -12,\r\n    marginLeft: -12,\r\n  },\r\n}));\r\n\r\nexport default function ChatSpace(props) {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n  <div>\r\n    <Grid container component={Paper} className={classes.root} >\r\n      <CssBaseline />\r\n      <Grid item xs={12} sm={8} md={5}>\r\n        \r\n      <Grid container >    \r\n      <List className={classes.root1}>\r\n      <ListItem button>\r\n        <ListItemAvatar>\r\n          <Avatar>\r\n            <ImageIcon />\r\n          </Avatar>\r\n        </ListItemAvatar>\r\n        <ListItemText primary=\"Photos\" secondary=\"Jan 9, 2014\" />\r\n      </ListItem>\r\n      <Divider variant=\"inset\" component=\"li\" />\r\n      <ListItem button>\r\n        <ListItemAvatar>\r\n          <Avatar>\r\n            <WorkIcon />\r\n          </Avatar>\r\n        </ListItemAvatar>\r\n        <ListItemText primary=\"Work\" secondary=\"Jan 7, 2014\" />\r\n      </ListItem>\r\n      <Divider variant=\"inset\" component=\"li\" />\r\n      <ListItem button>\r\n        <ListItemAvatar>\r\n          <Avatar>\r\n            <WorkIcon />\r\n          </Avatar>\r\n        </ListItemAvatar>\r\n        <ListItemText primary=\"Work\" secondary=\"Jan 7, 2014\" />\r\n      </ListItem>\r\n      <Divider variant=\"inset\" component=\"li\" />\r\n      <ListItem button>\r\n        <ListItemAvatar>\r\n          <Avatar>\r\n            <WorkIcon />\r\n          </Avatar>\r\n        </ListItemAvatar>\r\n        <ListItemText primary=\"Work\" secondary=\"Jan 7, 2014\" />\r\n      </ListItem>\r\n      <Divider variant=\"inset\" component=\"li\" />\r\n      <ListItem button>\r\n        <ListItemAvatar>\r\n          <Avatar>\r\n            <WorkIcon />\r\n          </Avatar>\r\n        </ListItemAvatar>\r\n        <ListItemText primary=\"Work\" secondary=\"Jan 7, 2014\" />\r\n      </ListItem>\r\n      <Divider variant=\"inset\" component=\"li\" />\r\n      <ListItem button>\r\n        <ListItemAvatar>\r\n          <Avatar>\r\n            <WorkIcon />\r\n          </Avatar>\r\n        </ListItemAvatar>\r\n        <ListItemText primary=\"Work\" secondary=\"Jan 7, 2014\" />\r\n      </ListItem>\r\n      <Divider variant=\"inset\" component=\"li\" />\r\n      <ListItem button>\r\n        <ListItemAvatar>\r\n          <Avatar>\r\n            <WorkIcon />\r\n          </Avatar>\r\n        </ListItemAvatar>\r\n        <ListItemText primary=\"Work\" secondary=\"Jan 7, 2014\" />\r\n      </ListItem>\r\n      <Divider variant=\"inset\" component=\"li\" />\r\n      <ListItem button>\r\n        <ListItemAvatar>\r\n          <Avatar>\r\n            <WorkIcon />\r\n          </Avatar>\r\n        </ListItemAvatar>\r\n        <ListItemText primary=\"Work\" secondary=\"Jan 7, 2014\" />\r\n      </ListItem>\r\n      <Divider variant=\"inset\" component=\"li\" />\r\n      <ListItem button>\r\n        <ListItemAvatar>\r\n          <Avatar>\r\n            <WorkIcon />\r\n          </Avatar>\r\n        </ListItemAvatar>\r\n        <ListItemText primary=\"Work\" secondary=\"Jan 7, 2014\" />\r\n      </ListItem>\r\n      <Divider variant=\"inset\" component=\"li\" />\r\n      <ListItem button>\r\n        <ListItemAvatar>\r\n          <Avatar>\r\n            <WorkIcon />\r\n          </Avatar>\r\n        </ListItemAvatar>\r\n        <ListItemText primary=\"Work\" secondary=\"Jan 7, 2014\" />\r\n      </ListItem>\r\n      <Divider variant=\"inset\" component=\"li\" />\r\n      <ListItem button>\r\n        <ListItemAvatar>\r\n          <Avatar>\r\n            <WorkIcon />\r\n          </Avatar>\r\n        </ListItemAvatar>\r\n        <ListItemText primary=\"Work\" secondary=\"Jan 7, 2014\" />\r\n      </ListItem>\r\n      <Divider variant=\"inset\" component=\"li\" />\r\n      <ListItem button>\r\n        <ListItemAvatar>\r\n          <Avatar>\r\n            <BeachAccessIcon />\r\n          </Avatar>\r\n        </ListItemAvatar>\r\n        <ListItemText primary=\"Vacation\" secondary=\"July 20, 2014\" />\r\n      </ListItem>\r\n    </List>\r\n      </Grid>\r\n      </Grid>\r\n      <Grid item xs={false} sm={4} md={7} className={classes.image} />\r\n    </Grid>\r\n  </div>\r\n  );\r\n} */\r\n\r\nimport React, {useEffect} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport clsx from 'clsx';\r\nimport SwipeableViews from 'react-swipeable-views';\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport AppBar from '@material-ui/core/AppBar';\r\n\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Zoom from '@material-ui/core/Zoom';\r\nimport Fab from '@material-ui/core/Fab';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport UpIcon from '@material-ui/icons/KeyboardArrowUp';\r\nimport { green, grey } from '@material-ui/core/colors';\r\nimport Box from '@material-ui/core/Box';\r\nimport MicIcon from '@material-ui/icons/Mic';\r\n\r\nimport {useAuth} from '../../App';\r\n\r\nimport ChatHome from './ChatHome';\r\nimport Room from './Room';\r\n\r\nfunction TabPanel(props) {\r\n  const { children, value, index, ...other } = props;\r\n\r\n  return (\r\n    <Typography\r\n      component=\"div\"\r\n      role=\"tabpanel\"\r\n      hidden={value !== index}\r\n      id={`action-tabpanel-${index}`}\r\n      aria-labelledby={`action-tab-${index}`}\r\n      {...other}\r\n    >\r\n      {value === index && <Box p={3}>{children}</Box>}\r\n    </Typography>\r\n  );\r\n}\r\n\r\nTabPanel.propTypes = {\r\n  children: PropTypes.node,\r\n  index: PropTypes.any.isRequired,\r\n  value: PropTypes.any.isRequired,\r\n};\r\n\r\nfunction a11yProps(index) {\r\n  return {\r\n    id: `action-tab-${index}`,\r\n    'aria-controls': `action-tabpanel-${index}`,\r\n  };\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: '100%',\r\n    position: 'relative',\r\n    minHeight: '80vh',\r\n    backgroundColor: 'white',\r\n  },\r\n  fab: {\r\n    position: 'absolute',\r\n    bottom: theme.spacing(13),\r\n    right: theme.spacing(2),\r\n  },\r\n  fabGreen: {\r\n    color: theme.palette.common.white,\r\n    backgroundColor: green[500],\r\n    '&:hover': {\r\n      backgroundColor: green[600],\r\n    },\r\n  },\r\n}));\r\n\r\nexport default function ChatSpace({addCallBack, deleteCallBack, webSocket}) {\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  \r\n  const auth = useAuth()\r\n\r\n  const [value, setValue] = React.useState(0);\r\n  const [onlinePersonalsList, setOnlinePersonalsList] = React.useState([]);\r\n  const [currentRoom, setCurrentRoom] = React.useState();\r\n\r\n  useEffect(() => {\r\n    console.log(addCallBack)\r\n    addCallBack({\r\n      id: 'ChatSpace',\r\n      type: [\r\n        'chat',\r\n        'online_personals_list',\r\n        'simple_messages'\r\n      ],\r\n\r\n      run: (data) => {\r\n        console.log('je suis la depuis chaspace')\r\n\r\n      console.log(data)\r\n      if (data.type === 'online_personals_list'){\r\n        setOnlinePersonalsList(data.content)\r\n      }\r\n      else if (data.type === 'simple_messages'){\r\n        setCurrentRoom(data.content)\r\n        setValue(1);\r\n      }\r\n      else if(data.type === \"chat\"){\r\n        if (data.content.type === \"message\"){\r\n          console.log('message set')\r\n          let room = {...currentRoom};\r\n              room.messages = [...room.messages, data.content.message]\r\n              console.log(room)\r\n            setCurrentRoom(room)\r\n        }\r\n      }\r\n      else{\r\n\r\n      }\r\n\r\n      }\r\n    })\r\n    return () => {\r\n      deleteCallBack('ChatSpace')\r\n    }\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    webSocket.send(JSON.stringify({\r\n      type: 'get_online_personals_list',\r\n      })\r\n    )\r\n    \r\n  }, [currentRoom])\r\n\r\n  const handleChange = (event, newValue) => {\r\n    setValue(newValue);\r\n  };\r\n\r\n  const getRoom = (id) => {\r\n    webSocket.send(JSON.stringify({\r\n      type: 'get_simple_messages',\r\n      content: {\r\n        room: id\r\n      }\r\n      })\r\n    )\r\n  }\r\n\r\n  const handleChangeIndex = (index) => {\r\n    setValue(index);\r\n  };\r\n\r\n  const sendChatMessage = (message, to) =>{\r\n    const code = new Date()\r\n\r\n    console.log('sendChatMessage')\r\n    webSocket.send(JSON.stringify({\r\n      type: 'chat',\r\n      content: {\r\n        room_type: 'simple',\r\n        author: auth.user.id,\r\n        to,\r\n        message_type: message.type,\r\n        message: message.content,\r\n        message_code: code.getTime()\r\n      }\r\n      })\r\n    )\r\n  }\r\n\r\n  const transitionDuration = {\r\n    enter: theme.transitions.duration.enteringScreen,\r\n    exit: theme.transitions.duration.leavingScreen,\r\n  };\r\n\r\n  const fabs = [\r\n    {\r\n      color: 'primary',\r\n      className: classes.fab,\r\n      icon: <AddIcon />,\r\n      label: 'Add',\r\n    },\r\n    {\r\n      color: 'secondary',\r\n      className: classes.fab,\r\n      icon: <MicIcon />,\r\n      label: 'Vocal',\r\n    },\r\n    {\r\n      color: 'inherit',\r\n      className: clsx(classes.fab, classes.fabGreen),\r\n      icon: <UpIcon />,\r\n      label: 'Expand',\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <Paper className={classes.root}>\r\n{/*       <AppBar position=\"static\" color=\"default\">\r\n        <Tabs\r\n          value={value}\r\n          onChange={handleChange}\r\n          indicatorColor=\"primary\"\r\n          textColor=\"primary\"\r\n          variant=\"fullWidth\"\r\n          aria-label=\"action tabs example\"\r\n        >\r\n          <Tab label=\"messages\" {...a11yProps(0)} />\r\n          <Tab label=\"room\" {...a11yProps(1)} />\r\n          <Tab label=\"video\" {...a11yProps(2)} />\r\n        </Tabs>\r\n      </AppBar> */}\r\n      <SwipeableViews\r\n        axis={theme.direction === 'rtl' ? 'x-reverse' : 'x'}\r\n        index={value}\r\n        onChangeIndex={handleChangeIndex}\r\n      >\r\n        <TabPanel value={value} index={0} dir={theme.direction}>\r\n          <ChatHome getRoom={getRoom} onlinePersonalsList={onlinePersonalsList}/>\r\n        </TabPanel>\r\n        <TabPanel value={value} index={1} dir={theme.direction}>\r\n          <Room changeView={setValue} currentRoom={currentRoom} sendChatMessage={sendChatMessage}/>\r\n        </TabPanel>\r\n        <TabPanel value={value} index={2} dir={theme.direction}>\r\n          Video\r\n        </TabPanel>\r\n      </SwipeableViews>\r\n      {fabs.map((fab, index) => (\r\n        <Zoom\r\n          key={fab.color}\r\n          in={value === index}\r\n          timeout={transitionDuration}\r\n          style={{\r\n            transitionDelay: `${value === index ? transitionDuration.exit : 0}ms`,\r\n          }}\r\n          unmountOnExit\r\n        >\r\n          <Fab aria-label={fab.label} className={fab.className} color={fab.color}>\r\n            {fab.icon}\r\n          </Fab>\r\n        </Zoom>\r\n      ))}\r\n    </Paper>\r\n  );\r\n}"],"sourceRoot":""}